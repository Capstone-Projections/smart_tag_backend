datasource db {
  provider = "mysql"
  url      = env("DB_URL")
  relationMode = "prisma"
}

// generator dbml {
//   provider   = "prisma-dbml-generator"
//   output     = "../dbml"
//   outputName = "smart_tag.dbml"
//   projectName = "Smart Tag"
//   projectDatabaseType = "MySQL"
//   projectNote = "Test project description"
// }

generator client {
  provider        = "prisma-client-js"
}
model attendance {
  idattendance      Int     @id @default(autoincrement())
  status            Boolean    @default(false)
  currentDateTime   DateTime  @default(now())
  lesson_idlesson   Int
  user_iduser Int
  lesson            lesson  @relation(fields: [lesson_idlesson], references: [idlesson], onDelete: NoAction, onUpdate: NoAction, map: "fk_attendance_lesson1")
  user           user @relation(fields: [user_iduser ], references: [iduser ], onDelete: NoAction, onUpdate: NoAction, map: "fk_attendance_user 1")

  @@index([lesson_idlesson], map: "fk_attendance_lesson1_idx")
  @@index([user_iduser ], map: "fk_attendance_user1_idx")
}

model course {
  idcourse            Int                   @id @default(autoincrement())
  courseCode          String                @unique(map: "courseCode_UNIQUE") @db.VarChar(45)
  name                String                @unique(map: "name_UNIQUE") @db.VarChar(200)
  course_has_lesson   course_has_lesson[]
  user_has_course  user_has_course[]
}



model course_has_lesson {
  course_idcourse Int
  lesson_idlesson Int
  course          course @relation(fields: [course_idcourse], references: [idcourse], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_has_lesson_course1")
  lesson          lesson @relation(fields: [lesson_idlesson], references: [idlesson], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_has_lesson_lesson1")

  @@id([course_idcourse, lesson_idlesson])
  @@index([course_idcourse], map: "fk_course_has_lesson_course1_idx")
  @@index([lesson_idlesson], map: "fk_course_has_lesson_lesson1_idx")
}

model lectureroom {
  idlectureRoom Int      @id @default(autoincrement())
  name          String?  @db.VarChar(100)
  roomLocation  String?  @db.VarChar(200)
  uid           String?  @db.VarChar(45)
  lesson        lesson[]
}

model lesson {
  idlesson                  Int                 @id @default(autoincrement())
  startTime                 String?           @db.VarChar(45)
  endTime                   String?           @db.VarChar(45)
  day                       String?             @db.VarChar(45)
  lectureRoom_idlectureRoom Int?
  attendance                attendance[]
  course_has_lesson         course_has_lesson[]
  lectureroom               lectureroom?        @relation(fields: [lectureRoom_idlectureRoom], references: [idlectureRoom], onDelete: SetNull, onUpdate: SetNull, map: "fk_lesson_lectureRoom1")

  @@index([lectureRoom_idlectureRoom], map: "fk_lesson_lectureRoom1_idx")
}

model user {
  iduser         Int                  @id @default(autoincrement())
  email              String               @unique(map: "email_UNIQUE") @db.VarChar(100)
  password           String?              @db.VarChar(100)
  firstName          String?              @db.VarChar(100)
  middleName         String?              @db.VarChar(100)
  lastName           String?              @db.VarChar(100)
  referenceNumber    String?              @unique(map: "referenceNumber_UNIQUE") @db.VarChar(45)
  indexNumber        Int?                 @unique(map: "indexNumber_UNIQUE")
  studyProgram       String?              @db.VarChar(100)
  doubtPoints        Float?               @db.Float @default(0)
  role               UserRole?
  attendance         attendance[]
  user_has_course user_has_course[]
  tokens             token[]
  isAdmin   Boolean? @default(false)
}

model token {
  idtoken        Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime

 // Relation fields
  user        user @relation(fields: [iduser], references: [iduser])
  iduser Int
  @@index([iduser],map:"fk_token_user_idx")
}

enum TokenType {
 EMAIL // used as a short-lived token sent to the user's email
  API
}
model user_has_course {
  user_iduser  Int
  course_idcourse   Int
  course            course  @relation(fields: [course_idcourse], references: [idcourse], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_course_course1")
  user          user @relation(fields: [user_iduser], references: [iduser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_course_user")

  @@id([user_iduser, course_idcourse])
  @@index([course_idcourse], map: "fk_user_has_course_course1_idx")
  @@index([user_iduser], map: "fk_user_has_course_user_idx")
}


enum UserRole {
  STUDENT
  LECTURER
}